plugins {
    id 'java'
    id "com.jaredsburrows.license" version "0.9.8"
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    implementation project(':quartz')

    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    implementation 'org.projectlombok:lombok:1.18.38'

    implementation "org.quartz-scheduler:quartz:$quartzVersion"
    implementation "ch.qos.logback:logback-classic:1.5.18"
    implementation(platform("org.apache.camel:camel-bom:4.8.3")) {
        exclude group: 'com.mchange', module: 'c3p0'
    }
    implementation "org.apache.camel:camel-main"
    implementation "org.apache.camel:camel-endpointdsl"
    implementation("org.apache.camel:camel-quartz") {
        exclude group: 'com.mchange', module: 'c3p0'
    }

    //SpringBoot example
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'
    implementation 'com.h2database:h2'
    implementation 'org.hibernate.orm:hibernate-community-dialects'

    implementation 'org.postgresql:postgresql:42.7.5'
}

tasks.withType(JavaExec).configureEach {
    classpath = sourceSets.main.runtimeClasspath
    group = "run"
}

tasks.register('runExample1', JavaExec) {
    description = 'Run Example 1'
    mainClass = 'com.esentri.quartz.example1.CarbonAwareTriggerExample'
}

tasks.register('runCamelExample', JavaExec) {
    description = 'Run Camel Example'
    mainClass = 'com.esentri.quartz.camelexample.CamelExample'
    systemProperty('org.quartz.properties', 'com/esentri/quartz/camelexample/quartz.properties')
}

tasks.register('runExample2', JavaExec) {
    description = 'Run Example 2 - dry-run feature'
    mainClass = 'com.esentri.quartz.example2.CarbonAwareTriggerDryRunExample'
    systemProperty('org.quartz.properties', 'com/esentri/quartz/example2/quartz.properties')
}

tasks.register('runExample3', JavaExec) {
    description = 'Run Example 3 - statistics'
    mainClass = 'com.esentri.quartz.example3.CarbonAwareTriggerStatisticsExample'
    systemProperty('org.quartz.properties', 'com/esentri/quartz/example3/quartz.properties')
}

tasks.register('runExample4', JavaExec) {
    description = 'Run Example 4 - Default OpenDataProvider as Rest-Client'
    mainClass = 'com.esentri.quartz.example4.CarbonAwareTriggerOpenDataExample'
    systemProperty('org.quartz.properties', 'com/esentri/quartz/example4/quartz.properties')
}

tasks.register('runExampleSpringBoot-h2', JavaExec) {
    description = 'Run SpringBoot Example with embedded H2 DB - jdbc jobstore and statistics'
    mainClass = 'com.esentri.quartz.springboot.QuartzSpringBootExample'
    systemProperty('spring.profiles.active', 'h2')
}

tasks.register('runExampleSpringBoot-postgres', JavaExec) {
    description = 'Run SpringBoot Example with external Postgres DB- jdbc jobstore and statistics'
    mainClass = 'com.esentri.quartz.springboot.QuartzSpringBootExample'
    systemProperty('spring.profiles.active', 'postgres')
}
